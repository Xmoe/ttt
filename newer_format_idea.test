Operatoren:
# Kommentar
$ ./starte_programm mit kommandozeilenargumenten
< schiebe daten auf stdinput
> erwarte einen bestimmten output, encoded Sonderzeichen!
~ erwarte einen output, match mit regex
^ sende CTRL character an Programm
? erwarte einen exit code
= setze eine Variable für den Programmablauf
t lege den Timeout für alle Interaktionen mit diesem Programm fest

Inputs und Outputs werden immer escaped; \n wird als Newline 0xA interpretiert
Welche Zeichen werden escaped? (https://doc.rust-lang.org/reference/tokens.html#character-escapes)

Eine Interaktion ist definiert als ein optionaler Input (<) und ein Output (>,r)

Alle Operatoren werden mit einer Zahl prefixed, welche den jeweiligen Prozess identifiziert, auf welchem agiert werden soll, zB:
0$ curl http://google.com
0> 200 OK

Als syntaktischer Zucker kann für Prozess 0 die Zahl weggelassen werden, und Prozess 0 ist implizit angegeben:
$ curl http://google.com
> 200 OK
1$ ping http://google.com
1> pong!

Für >, r, ? kann der Postfix-Modifier ! verwendet werden. Dies markiert einen kritischen Fehler. Normalerweise sind alle Abweichungen vom erwarteten Verhalten eine Warnung,
mit ! wird daraus ein Fehler, welcher den Test direkt als fehlgeschlagen markiert, zB:
1$ ./convert10to16 1000
1>! 3E8
 
# Variablen
## Man kann Variable setten mit =
= {program_name} ./sgrep

## Variablen, welche vorm Ausführen durch das Programm gesetzt werden können.

{0$} <- path of the first program
{1$} <- path of the second program etc

# Programm starten
$ ./convert10to16 1000
0$ ./convert10to16 1000
0$ {0$} 1000

# Interaction with a program
1< hallo, dies ist input auf stdin
1> Hallo, die ist die Antwort vom Programm
1r! es muss dieses r[e*]gex matchen
1^C ((sendet SIGSTOP an Prozess))

# Exit codes können verglichen werden
1? 0 (Exit code = 0)
1? -1 (Exit code = -1)
1? >10 (Exit code muss größer als 0 sein)
1? <-2 (Exit code muss kleiner -2 sein)


Ein Testcase hat einen Titel und wird durch den Anfang eines neuen Testcases oder EOF beendet
[Test1: 1000]
$ ./convert10to16 1000
r! 3[e|E]8

[Test2: 0]
$ ./convert10to16 0
>! 0


Data Model:

Executor:
- [Process]
- [Interaction]

Process:
- Path
- cmdline args
- Expected exit code

Interaction:
- Process Id
- Optional<Input>
- Output | Regex

