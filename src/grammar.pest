// It's important to add SOI and EOI to tell the parser to validate the whole input.
// Otherwise it may silently fail somewhere in the middle when it encounters and invalid input
TestSuite = { SOI ~ (NEWLINE|COMMENT|VariableInitialization)* ~ TestCase* ~ EOL}

COMMENT = _{ ("#" ~ (!NEWLINE ~ ANY)* ~ EOL) }

VariableInitialization = { VariableBody ~ "=" ~ Space ~ Value ~ EOL}
VariableBody = _{ "{" ~ Variable ~ "}" ~ " "}
Variable = { (!"}" ~ !EOL ~ ANY)+ }
Value = { (!EOL ~ ANY)+ }

TestCase = { TestCaseHeader ~ Instruction+ }

TestCaseHeader = _{ HeaderOpen ~ TestCaseName ~ HeaderClose ~ EOL }
TestCaseName = ${ (!HeaderClose ~ !EOL ~ ANY)+ }
HeaderOpen = _{ "[" }
HeaderClose = _{ "]" }

Instruction = { InstructionLaunch | InstructionStdin | InstructionStdout | InstructionRegex | InstructionExitCode | InstructionControlChar }

InstructionLaunch = { ProcessNumber? ~ "$" ~ Space ~ VariableBody? ~ Payload ~ EOL }
InstructionStdin = { ProcessNumber? ~ "<" ~ Space ~ Payload ~ EOL }
InstructionStdout = { ProcessNumber? ~ ">" ~ Space ~ Payload ~ EOL }
InstructionRegex = { ProcessNumber? ~ "r" ~ Space ~ Payload ~ EOL }
Payload = ${ (!NEWLINE ~ ANY)* ~ &EOL }

InstructionExitCode = { ProcessNumber? ~ "?" ~ Space ~ ExitCodeModifier? ~ ExitCode ~ EOL}
ExitCodeModifier = { "<" | ">"}
ExitCode = { ASCII_DIGIT+ ~ &EOL}

InstructionControlChar = { ProcessNumber? ~ "^" ~ Space ~ ControlChar ~ EOL}
ControlChar = { ASCII ~ &EOL}


ProcessNumber = { ASCII_DIGIT }

EOL = _{ NEWLINE+ | &EOI}
Space = _{ " " }